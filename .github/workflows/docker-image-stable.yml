# This GitHub workflow will automatically update docker image tags of aaa-depl in the datakaveri/iudx-deployment repository files, whenever a docker image is pushed to ghcr.io/datakaveri/aaa-depl. It will update the 5.5.0 stable branch if the tag is 5.5.0.

name: Update AAA docker image tags (Release 5.5.0)

# This trigger will run the workflow whenever a new package is published to the registry
on:
  registry_package:
    types: [published]

# This is needed to read the registry packages 
permissions:
  packages: read

jobs:

  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
      with:
       repository: datakaveri/iudx-deployment
       # Jenkins token to perform git operations
       token: "${{ secrets.JENKINS_UPDATE }}"
       fetch-depth: 0
       
    # This step updates the AAA Server docker image tags   
    - name: Update AAA docker image tags
      env: 
        GH_TOKEN: ${{ secrets.JENKINS_UPDATE}}
      run: | 
        # Get the latest version of 5.5.0 tags from the container registry using GitHub API
        export newtag5_5_0=`(head -n 1 <(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/orgs/datakaveri/packages/container/aaa-depl/versions | jq ' .[].metadata.container.tags[0]'  | grep 5.5.0 | grep -v alpha | sed -e 's/^"//' -e 's/"$//'))`
        
        # Get the old tags from the YAML files
        export oldtag5_5_0=`yq -r .services.auth.image Docker-Swarm-deployment/single-node/auth/auth-stack.yaml | cut -d : -f 2`
        
        git checkout 5.5.0
        
        # Set Git user
        git config --global user.name 'jenkins-datakaveri'
        git config --global user.email "96175780+jenkins-datakaveri@users.noreply.github.com"
        
        # Update the YAML files and create a new branch for each tag update
        if [ "$newtag5_5_0" != "$oldtag5_5_0" ]
        then
         git checkout -b aaa-5.5.0-automatic-updates/$newtag5_5_0

         # Uses sed to find and replace $oldtag5_5_0 with $newtag5_5_0 in Docker-Swarm-deployment/single-node/auth/auth-stack.yaml file
         sed -i s/$oldtag5_5_0/$newtag5_5_0/g Docker-Swarm-deployment/single-node/auth/auth-stack.yaml
         
         # Exports the current version of the application from K8s-deployment/Charts/auth-server/Chart.yaml file
         export oldappversion=`yq -r .version K8s-deployment/Charts/auth-server/Chart.yaml`
         
         # Uses awk to increment the version number in K8s-deployment/Charts/auth-server/Chart.yaml file
         export newappversion=`yq -r .version K8s-deployment/Charts/auth-server/Chart.yaml | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}' `
         
         # Uses sed to find and replace $oldappversion with $newappversion in K8s-deployment/Charts/auth-server/Chart.yaml and K8s-deployment/Charts/auth-server/values.yaml files
         sed -i s/$oldappversion/$newappversion/g K8s-deployment/Charts/auth-server/Chart.yaml
         sed -i s/$oldtag5_5_0/$newtag5_5_0/g K8s-deployment/Charts/auth-server/values.yaml
         git add Docker-Swarm-deployment/single-node/auth/auth-stack.yaml K8s-deployment/Charts/auth-server/values.yaml K8s-deployment/Charts/auth-server/Chart.yaml
         git commit --allow-empty -m
